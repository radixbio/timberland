job "${prefix}minio-job" {
  all_at_once = false

  constraint {
    attribute = "$${attr.kernel.name}"
    operator = "="
    value = "linux"
  }

  datacenters = ["dc1"]
${ !have_upstream_creds ? "" : <<EOH
  group minio-remote-group {
    count = 1
    task "minio-remote" {
      vault {
        policies = ["read-flag-config"]
        change_mode = "signal"
        change_signal = "SIGUSR1"
      }

      config {
        image = "minio/minio:latest"
        args = ["gateway", "s3"]
        auth_soft_fail = false
        entrypoint = ["minio"]
        privileged = false
        volumes = ["/opt/radix/minio_data_remote:/data"]
        cap_add = []
      }

      driver = "docker"
      env = {
        "MINIO_ACCESS_KEY" = "${have_upstream_creds ? aws_access_key : "minio-access-key"}",
        "MINIO_SECRET_KEY" = "${have_upstream_creds ? aws_secret_key : "minio-secret-key"}"
      }

      kill_timeout = "5s"
      kill_signal = "SIGINT"
      leader = false

      resources {
        cpu = 1000
        memory = 300
      }

      shutdown_delay = "0s"
    }

    network {
      mbits = 10
      mode = "bridge"
    }

    service {
      name = "minio-remote-service"
      port = 9000
      tags = ["minio", "remote", "${prefix}"]
      address_mode = "auto"

      connect {
        sidecar_service {
          proxy {
            upstreams {
              destination_name = "kafka-0"
              local_bind_port = 9092
            }
          }
        }
      }

      check {
        type = "http"
        name = "minio-remote-health"
        path = "/minio/health/live"
        interval = "30s"
        timeout = "5s"
        expose = true
      }
    }
  }
EOH
}

  group "minio-local-group" {
    count = 1

    task "minio-local" {
      vault {
        policies = ["read-flag-config"]

        change_mode = "signal"
        change_signal = "SIGUSR1"
      }

      config {
        image = "minio/minio:latest"
        auth_soft_fail = false
        privileged = false
        entrypoint = ["minio", "--compat"]
        args = ["server", "/data"]
        volumes = ["/opt/radix/minio_data:/data"]
        cap_add = []
      }

      driver = "docker"

      env = {
        "MINIO_NOTIFY_KAFKA_ENABLE" = "true",
        "MINIO_NOTIFY_KAFKA_BROKERS" = "$${NOMAD_UPSTREAM_ADDR_kafka-0}",
        "MINIO_NOTIFY_KAFKA_TOPIC" = "bucketevents",
        "MINIO_ACCESS_KEY" = "${have_upstream_creds ? aws_access_key : "minio-access-key"}",
        "MINIO_SECRET_KEY" = "${have_upstream_creds ? aws_secret_key : "minio-secret-key"}"
      }

      kill_timeout = "5s"
      kill_signal = "SIGINT"
      leader = false

      resources {
        cpu = 1000
        memory = 300
      }

      shutdown_delay = "0s"
    }

    network {
      mbits = 10
      mode = "bridge"
    }

    service {
      name = "minio-local-service"
      port = 9000
      tags = ["minio", "local", "${prefix}"]
      address_mode = "auto"

      connect {
        sidecar_service {
          proxy {
            upstreams {
              destination_name = "kafka-0"
              local_bind_port = 9092
            }
          }
        }
      }

      check {
        type = "http"
        name = "minio-local-health"
        path = "/minio/health/live"
        interval = "30s"
        timeout = "5s"
        expose = true
      }
    }
  }

  namespace = "default"
  priority = 50
  region = "global"
  type = "service"

  update {
    max_parallel = 1
    health_check = "checks"
    min_healthy_time = "10s"
    healthy_deadline = "5m"
    progress_deadline = "10m"
    auto_revert = false
    canary = 0
    stagger = "10s"
  }
}
