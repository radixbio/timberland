job "${prefix}elasticsearch" {
  all_at_once = false

  constraint {
    attribute = "$${attr.kernel.name}"
    operator = "="
    value = "linux"
  }

  datacenters = ["dc1"]

  group "es" {

    constraint {
      operator = "distinct_hosts"
      value = "true"
    }

    count = ${ quorum_size }

    task "es-generic-node" {

      config {
        image = "elasticsearch:7.3.2"
        args = ["-c","ln -s /local/unicast_hosts.txt /usr/share/elasticsearch/config/unicast_hosts.txt; elasticsearch -Ecluster.name=radix-es -Ediscovery.seed_providers=file -Ecluster.initial_master_nodes=${ dev ? "es1,es2,es3" : "es1"}"]
        auth_soft_fail = false
        command = "bash"
        hostname = "es$${NOMAD_ALLOC_INDEX+1}"
        ulimit = {
          "nofile" = "65536",
          "nproc" = "8192",
          "memlock" = "-1"
        }
        privileged = false
        network_mode = "weave"
        port_map = {
          "rest" = 9200,
          "transport" = 9300
        }
        volumes = ["/opt/radix/timberland:/timberland"]
        cap_add = []
      }

      driver = "docker"
      env = {"ES_JAVA_OPTS" = "-Xms8g -Xmx8g"}
      kill_timeout = "5s"
      kill_signal = "SIGINT"
      leader = false

      resources {
        memory = 10000

        network {
          mbits = 10

          port "rest" {
            static = 9200
          }

          port "transport" {
            static = 9300
          }
        }
      }

      service {
        port = "transport"
        tags = ["elasticsearch","transport"]
        address_mode = "auto"

        check {
          address_mode = "host"
          grpc_use_tls = true
          initial_status = "critical"
          interval = "10s"
          method = "GET"
          port = "transport"
          protocol = "http"
          timeout = "2s"
          type = "tcp"
          tls_skip_verify = false
        }
      }

      service {
        port = "rest"
        tags = ["elasticsearch","rest"]
        address_mode = "auto"

        check {
          address_mode = "host"
          grpc_use_tls = true
          initial_status = "critical"
          interval = "10s"
          method = "GET"
          port = "rest"
          protocol = "http"
          timeout = "2s"
          type = "tcp"
          tls_skip_verify = false
        }
      }

      shutdown_delay = "0s"
      user = "elasticsearch"

      template {
        change_mode = "noop"
        destination = "local/unicast_hosts.txt"
        env = false
        left_delimiter = "{{"
        perms = "644"
        right_delimiter = "}}"
        source = "/opt/radix/timberland/nomad/config/elasticsearch/unicast_hosts.tpl"
        splay = "5s"
        vault_grace = "15s"
      }
    }
  }


  group "kibana" {

    constraint {
      operator = "distinct_hosts"
      value = "true"
    }

    count = 1

    task "kibana" {

      config {
        image = "registry.gitlab.com/radix-labs/kibana-gantt"
        args = ["--elasticsearch.hosts=http://${prefix}elasticsearch-elasticsearch-es-generic-node.service.consul:9200","--server.host=0.0.0.0","--path.data=/alloc/data","--elasticsearch.preserveHost=false","--xpack.apm.ui.enabled=false","--xpack.graph.enabled=false","--xpack.ml.enabled=false"]
        auth_soft_fail = false
        command = "kibana"
        hostname = "$${attr.unique.hostname}-em"
        ulimit = {
          "nofile" = "65536",
          "nproc" = "8192",
          "memlock" = "-1"
        }
        privileged = false
        network_mode = "weave"
        port_map = {"kibana" = 5601}
        cap_add = []
      }

      driver = "docker"
      env = {"NODE_OPTIONS" = "--max-old-space-size=1024"}
      kill_timeout = "5s"
      kill_signal = "SIGINT"
      leader = false

      resources {
        cpu = 1024
        memory = 2048

        network {
          mbits = 10

          port "kibana" {
            static = 5601
          }
        }
      }


      service {
        port = "kibana"
        tags = ["kibana","http"]
        address_mode = "auto"

        check {
          address_mode = "host"
          grpc_use_tls = true
          initial_status = "critical"
          interval = "10s"
          method = "GET"
          port = "kibana"
          protocol = "http"
          timeout = "2s"
          type = "tcp"
          tls_skip_verify = false
        }
      }

      shutdown_delay = "0s"
    }
  }

  namespace = "default"
  priority = 50
  region = "global"
  type = "service"

  update {
    max_parallel = 1
    health_check = "checks"
    min_healthy_time = "10s"
    healthy_deadline = "5m"
    progress_deadline = "10m"
    auto_revert = false
    canary = 0
    stagger = "10s"
  }
}
