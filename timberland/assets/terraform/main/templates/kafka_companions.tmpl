job "kafka-companion-daemons" {
  all_at_once = false

  constraint {
    attribute = "$${attr.kernel.name}"
    operator = "="
    value = "linux"
  }

  datacenters = ["dc1"]

  group "kafkaCompanions" {
    count = 1

    task "schemaRegistry" {

      config {
        image = "confluentinc/cp-schema-registry:5.3.1"
        auth_soft_fail = false
        hostname = "$${attr.unique.hostname}-kafka-schema-registry"
        privileged = false
        network_mode = "weave"
        port_map = {"registry_listener" = 8081}
        cap_add = []
      }

      driver = "docker"
      env = {
        "SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR" = ${ dev ? "\"1\"" : "\"3\"" },
        "SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS" = "PLAINTEXT://kafka-daemons-kafka-kafka.service.consul:29092",
        "SCHEMA_REGISTRY_HOST_NAME" = "$${attr.unique.hostname}-kafka-schema-registry",
        "SCHEMA_REGISTRY_LISTENERS" = "http://0.0.0.0:8081"
      }
      kill_timeout = "5s"
      kill_signal = "SIGINT"
      leader = false

      resources {
        memory = 1000

        network {
          mbits = 10

          port "registry_listener" {
            static = 8081
          }
        }
      }

      service {
        port = "registry_listener"
        tags = ["kafka-companion","kafka-schema-registry"]
        address_mode = "auto"

        check {
          address_mode = "${ test ? "driver" : "host" }"
          grpc_use_tls = true
          initial_status = "critical"
          interval = "10s"
          method = "GET"
          port = "registry_listener"
          protocol = "http"
          timeout = "2s"
          type = "tcp"
          tls_skip_verify = false
        }
      }

      shutdown_delay = "0s"
    }

    task "kafkaRestProxy" {

      config {
        image = "confluentinc/cp-kafka-rest:5.3.1"
        auth_soft_fail = false
        hostname = "$${attr.unique.hostname}-kafka-rest-proxy"
        privileged = false
        network_mode = "weave"
        port_map = {"rest" = 8082}
        cap_add = []
      }

      driver = "docker"
      env = {
        "KAFKA_REST_BOOTSTRAP_SERVERS" = "INSIDE://kafka-daemons-kafka-kafka.service.consul:29092",
        "KAFKA_REST_SCHEMA_REGISTRY_URL" = "http://kafka-companion-daemons-kafkaCompanions-schemaRegistry.service.consul:8081",
        "KAFKA_REST_HOST_NAME" = "$${attr.unique.hostname}-kafka-rest-proxy",
        "KAFKA_REST_LISTENERS" = "http://0.0.0.0:8082"
      }
      kill_timeout = "5s"
      kill_signal = "SIGINT"
      leader = false

      resources {
        memory = 1000

        network {
          mbits = 10

          port "rest" {
            static = 8082
          }
        }
      }

      service {
        port = "rest"
        tags = ["kafka-companion","kafka-rest-proxy"]
        address_mode = "auto"

        check {
          address_mode = "${ test ? "driver" : "host" }"
          grpc_use_tls = true
          initial_status = "critical"
          interval = "10s"
          method = "GET"
          port = "rest"
          protocol = "http"
          timeout = "2s"
          type = "tcp"
          tls_skip_verify = false
        }
      }

      shutdown_delay = "0s"
    }

    task "kafkaConnect" {

      config {
        image = "confluentinc/cp-kafka-connect:5.3.1"
        auth_soft_fail = false
        hostname = "$${attr.unique.hostname}-kafka-connect"
        privileged = false
        network_mode = "weave"
        port_map = {"connect" = 8083}
        cap_add = []
      }

      driver = "docker"
      env = {
        "CONNECT_REST_ADVERTISED_HOST_NAME" = "$${attr.unique.hostname}-kafka-connect",
        "PROXY" = "true",
        "CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL" = "http://kafka-companion-daemons-kafkaCompanions-kafkaSchemaRegistry:8081",
        "CONNECT_KEY_CONVERTER" = "io.confluent.connect.avro.AvroConverter",
        "CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL" = "http://kafka-companion-daemons-kafkaCompanions-kafkaSchemaRegistry:8081",
        "CONNECT_PLUGIN_PATH" = "/usr/share/java,/etc/kafka-connect/jars",
        "CONNECT_REST_PORT" = "8083",
        "CONNECT_LOG4J_LOGGERS" = "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR",
        "CONNECT_LOG4J_ROOT_LOGLEVEL" = "INFO",
        "CONNECT_BOOTSTRAP_SERVERS" = "INSIDE://kafka-daemons-kafka-kafka.service.consul:29092",
        "KAFKA_REST_PROXY_URL" = "http://kafka-companion-daemons-kafkaCompanions-kafkaRestProxy.service.consul:8082",
        "CONNECT_GROUP_ID" = "kafka-daemons-connect-group",
        "CONNECT_INTERNAL_KEY_CONVERTER" = "org.apache.kafka.connect.json.JsonConverter",
        "CONNECT_STATUS_STORAGE_TOPIC" = "kafka-connect-daemons-connect-status",
        "CONNECT_VALUE_CONVERTER" = "io.confluent.connect.avro.AvroConverter",
        "CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR" = "${ dev ? "1" : "3" }",
        "CONNECT_STATUS_STORAGE_REPLICATION_FACTOR" = "${ dev ? "1" : "3" }",
        "CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR" = "${ dev ? "1" : "3" }",
        "CONNECT_INTERNAL_VALUE_CONVERTER" = "org.apache.kafka.connect.json.JsonConverter",
        "CONNECT_OFFSET_STORAGE_TOPIC" = "kafka-connect-daemons-connect-offsets",
        "CONNECT_CONFIG_STORAGE_TOPIC" = "kafka-connect-daemons-connect-configs"
      }
      kill_timeout = "5s"
      kill_signal = "SIGINT"
      leader = false

      resources {
        memory = 2000

        network {
          mbits = 10

          port "connect" {
            static = 8083
          }
        }
      }

      service {
        port = "connect"
        tags = ["kafka-companion","kafka-connect"]
        address_mode = "auto"

        check {
          address_mode = "${ test ? "driver" : "host" }"
          grpc_use_tls = true
          initial_status = "critical"
          interval = "10s"
          method = "GET"
          port = "connect"
          protocol = "http"
          timeout = "2s"
          type = "tcp"
          tls_skip_verify = false
        }
      }

      shutdown_delay = "0s"
    }


    task "kSQL" {

      config {
        image = "confluentinc/cp-ksql-server:5.3.1"
        auth_soft_fail = false
        hostname = "$${attr.unique.hostname}-kafka-ksql-server"
        privileged = false
        network_mode = "weave"
        port_map = {"ui" = 8000}
        cap_add = []
      }

      driver = "docker"
      env = {
        "PROXY" = "true",
        "KSQL_KQSL_SERVICE_ID" = "ksql-server",
        "KAFKA_REST_PROXY_URL" = "http://kafka-companion-daemons-kafkaCompanions-kafkaRestProxy.service.consul:8082",
        "KSQL_LISTENERS" = "http://0.0.0.0:8000",
        "KSQL_BOOTSTRAP_SERVERS" = "INSIDE://kafka-daemons-kafka-kafka.service.consul:29092"
      }
      kill_timeout = "5s"
      kill_signal = "SIGINT"
      leader = false

      resources {
        memory = 1000

        network {
          mbits = 10

          port "ui" {
            static = 8000
          }
        }
      }

      service {
        port = "ui"
        tags = ["kafka-companion","kafka-topics-ui"]
        address_mode = "auto"

        check {
          address_mode = "${ test ? "driver" : "host" }"
          grpc_use_tls = true
          initial_status = "critical"
          interval = "10s"
          method = "GET"
          port = "ui"
          protocol = "http"
          timeout = "2s"
          type = "tcp"
          tls_skip_verify = false
        }
      }

      shutdown_delay = "0s"
    }
  }

  namespace = "default"
  priority = 50
  region = "global"
  type = "service"

  update {
    max_parallel = 1
    health_check = "checks"
    min_healthy_time = "10s"
    healthy_deadline = "5m"
    progress_deadline = "10m"
    auto_revert = false
    canary = 0
    stagger = "10s"
  }
}
